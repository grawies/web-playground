ul, h3 {
  color: blue;
  font-size: 10px;
}
h6 {
  text-transform: uppercase;
}
.myclassname {
  font-size:30px;
  font-style: italic;
  opacity: .6;
}
#myid {
  color: red;
}
.centered_grey {
  text-align: center;
  background-color: grey;
}

/* selector.class */
h2.fat { /* all 'h2' with class 'fat' */
  background-color: black;
}
/* child combinator */
div > span { /* all 'a' which are _direct_ child of a 'p' element. */
  opacity: 0.3;
  background-color: pink;
}
/* descendant selector */
div span { /* all content which is in both a 'span' and a 'p'. */
  font-style: italic;
  font-family: "Courier New", monospace;
}
.centered_grey.myclassname {
  font-weight: bold;
}
/*
There are also:
  adjacent sibling conbinators (selector + selector)
  general sibling combinators (selector ~ selector)
*/

/* pseudo-class selector:
selector:pseudo-class {
 ..
}

pseudo-class is predefined.
link, visited, hover, active, nth-child(..)
*/
a:visited {
  color: red;
}
a:hover {
  color: green;
}

#menu {
  text-align: center;
}

@media screen and (max-width: 800px) {
  #menu {
    font-size: 40px;
    width: 100%;
  }
  .menuitem {
    font-size: 40px;
    width: 100%;
  }
}

@media screen and (min-width: 801px) {
  #menu {
    font-size: 15px;
    width: 300px;
  }
  .menuitem {
    font-size: 25px;
    width: 300px;
  }
}

.menuitem:link, .menuitem:visited {
  text-decoration:none;
  background-color: black;
  color: white;
}

.menuitem {
  text-decoration: none;
  text-align: center;
  font-family: sans-serif;
  font-weight: bold;
  margin-bottom: 1px;
  display: block;
}

.menuitem:hover, .menuitem:active {
  background-color: grey;
}


ul > li:nth-child(2) {
  font-size: 24px;
}

ol > li:nth-child(odd) {
  background-color: pink;
}

.informational_header {
  color: #000000;
  font-size: 25px;
  font-family: Arial, Helvetica, sans-serif;
}

.informational li {
  color: black;
  background-color: white !important; /* otherwise the 'ol>li' rule above will take precedence. */
  /* Pixels are considered absolute units of measurement. But on higher-resolution devices, this pixel unit actually maps to several pixels on the device screen, i.e. sharper text. So this 16 px font will not be super tiny on an ultra-high res screen.*/
  font-size: 16px;
  font-family: sans-serif;
}

#percent {
  font-size: 200%;
}

#em {
  /* specified in terms of the width of an 'm'. */
  font-size: 2em;
}

/* reset default spacing, to more clearly see our changes. */
body {
  margin: 0;
  padding: 0;
}

#outer_box {
  text-align: center;
  background-color: red;
      /*   top right bot  left */
  padding: 10px 10px 10px 10px;
  /* could also have been one value, to set all to same. */
  border: 5px dashed black;
  margin: 7px;
  /* this is by default just the content width.
     Add border, margin, padding to get actual size. */
  width: 300px;
  height: 100px;
  overflow: auto;
  /* default: visible (overflow),
     hidden (cut off),
     auto (scrollbars as neded),
     scroll (always scrollbars).
  */
}

* {
  /* this fixes the element width: all frameworks use this as the sizing model. go with this.
     But! We can't set it on body{}, because it is a property that _is_ _not_ _inherited_!
     We must use the star selector. Use it whenever you're resetting CSS.
  */
  box-sizing: border-box;
  /* It is new in css3. */
}

#other_box {
  background-color: lightblue;
  margin: 40px;
  /* vertical margin is not cumulative.
     the space between outer_box and other_box will be 40px: max(7, 40).
  */
}

#inner_box {
  background-color: pink;
}

#my_bg {
  width: 200px;
  height: 200px;
  background-color: lightblue;
  background-image: url("http://i.imgur.com/CU9Hd.jpg");
  background-repeat: no-repeat;
  background-position: 10px 20px;
  background-size: cover;
  /* Alternative: can specify everything on one line.
  background: url(..) no-repeat right center;
  this overrides every previous background property.
  */
}

#floaty {
  background-color: lightgrey;
}

#floaty > p {
  margin: 5px;
  width: 50px;
  height: 50px;
  border: 1px solid black;
}

#p1 {
  background-color: #A1A125; /* gold */
  /* floats are taken out of normal document flow.*/
}
#p2 {
  background-color: #00FFFF; /* blue */
  height: 200px;
  float: right;
  /* note: margin never collapses on floating elements. */
}
#p3 {
  background-color: #AA2255; /* red */
  float: left;
}
#p4 {
  background-color: #AAFFAA; /* green */
}

section {
  /* Disallow any floating to the left of this. */
  clear: both; /* or left/right */
}

.clearfix:after {
   content: ".";
   visibility: hidden;
   display: block;
   height: 0;
   clear: both;
}

#halfpage_container {
  background-color: lightgrey;
}

.halfpage {
  float: left;
  background-color: lightgrey;
  box-sizing: border-box;
  width: 50%;
  padding: 15px;
  text-align: justify;
  font-family: sans-serif;
}

#hanging_blob {
  /* all elements are static position by default, except html (relative). */
  /* relative position offsets the element relative to its normal document flow position. */
  /* absolute position is relative to closest non-static ancestor. this takes it out of the doc flow.*/
  position: fixed;
  top: 10px;
  right: 5px;
  padding: 5px;
  border: 1px solid black;
  background-color: yellow;
  text-decoration: none;
}

#hanging_blob:link, #hanging_blob:visited {
  color: black;
}

#hanging_blob:hover, #hanging_blob:active {
  background-color: gold;
}
